# author: Iker Gonzalez Santamaria
# email: iker.gonzalezsantamaria@esss.se
# copyright: (C) 2016 European Spallation Source (ESS)
# version: 1.0.1
# date: 2016/JAN/21
# description: File that describes the Hameg HMO3034 Oscilloscope commands/statuses that the tool Kameleon receives/sends from/to clients through the TCP/IP protocol.



# The terminator (EOL) of commands/statuses is described in the "TERMINATOR" variable. By default, the terminator is empty. If defined, the terminator is inserted at the end of the commands/statuses received/sent from/to clients before Kameleon starts to process these. The generic form of this variable is:
#
#    TERMINATOR = value
#
# Where value can either be an arbitrary string (e.g. "END") or one of the following pre-defined terminators:
#
#    LF     : the terminator is a line feed (0xA).
#    CR     : the terminator is a carriage return (0xD).
#    LF + CR: the terminator is a line feed (0xA) followed by a carriage return (0xD).
#    CR + LF: the terminator is a carriage return (0xD) followed by a line feed (0xA).

TERMINATOR = ""



# Data (i.e. commands) received from the client are described in the "COMMANDS" list. The generic form of this list is:
#
#    COMMANDS = [[description_1, command_1, status_1, wait_1], [description_2, command_2, status_2, wait_2], ..., [description_X, command_X, status_X, wait_X]]
#
# Where:
#
#    description: (mandatory) string that describes the command (e.g. "Turn power on").
#    command    : (mandatory) string that represents the command (e.g. "AC1"). Only data (received from the client) that matches exactly the command is selected. Additional matching policies are available:
#                    - if command starts with "***", then any data (received from the client) that ends with command is selected.
#                    - if command ends with "***", then any data (received from the client) that starts with command is selected.
#                    - if command starts and ends with "***", then any data (received from the client) that contains the command is selected.
#    status     : (optional) integer that specifies the index of the status (stored in the "STATUSES" list) to send to the client after the command is selected. The first status in the list is at index 1. If set to 0 or not specified, then no status is sent.
#    wait       : (optional) integer that specifies the time to wait (in milliseconds) before sending the status to the client. If set to 0 or not specified, then the status is immediately sent (i.e. right after the command is received).

COMMANDS = [["identification", "*IDN?***", 1],
            ["mean value", "MEAN***", 2],
            ["voltage", "VOLT***", 3],
            ["voltage waveform", "WAVEVOLT***", 4],
            ["set voltage", "SETVOLT***", 5],
            ["frequency", "FREQ***", 6]]



# Data (i.e. statuses) sent to the client are described in the "STATUSES" list. The generic form of this list is:
#
#    STATUSES = [[description_1, behavior_1, value_1, prefix_1, suffix_1, timeout_1], [description_2, behavior_2, value_2, prefix_2, suffix_2, timeout_2]], ..., [description_X, behavior_X, value_X, prefix_X, suffix_X, timeout_X]]
#
# Where:
#
#    description: (mandatory) string that describes the status (e.g. "Get power status").
#    behavior   : (mandatory) integer that specifies the behavior for generating the status. It can either be:
#                    - FIXED (sends a fixed value to the client)
#                    - ENUM (sends a value - belonging to an enumeration - to the client)
#                    - INCR (sends an incremented value to the client)
#                    - RANDOM (sends a random value to the client)
#                    - CUSTOM (sends a custom value to the client)
#    value      : (mandatory) value to send to the client. Depending on the behavior, it can either be an integer, string or list:
#                    - when FIXED, the value is an integer or string. Independently of how many times it is sent to the client, the value remains the same (i.e. does not change).
#                    - when ENUM, the value is a list. It represents a set of elements (enumeration). After sending an element of the list to the client, the next value to be sent is the next element in the list. When the last element is sent, the next to be sent is the the first element of the list.
#                    - when INCR, the value is an integer or list. If an integer, then the first value to be sent is a 0 and subsequent values to be sent are incremented by value. If a list, then the lower bound, upper bound and increment values are defined by the first, second and third elements of the list, respectively.
#                    - when RANDOM, the value is an integer or a list. If an integer, then a random number between 0 and value is generated. If a list, then the lower and upper bounds of the random number to generate are defined by the first and second elements of the list, respectively. The generated random number is sent to the client.
#                    - when CUSTOM, the value is a string. It contains the name of an user-defined Python function to be called by Kameleon. The returned value of this function is sent to the client.
#    prefix     : (optional) string that contains the prefix to insert at the beginning of the value to send to the client. If not specified, then nothing is inserted.
#    suffix     : (optional) string that contains the suffix to insert at the end of the value to send to the client. If not specified, then nothing is inserted.
#    timeout    : (optional) integer that specifies the time-out (in milliseconds) after which the status is sent to the client (i.e. time-based). If set to 0 or not specified, then the status is only sent after receiving a command from the client (i.e. event-based).

STATUSES = [["identification", FIXED, "HAMEG,HMO3034,020398635,05.407\r\n"],
            ["mean value", CUSTOM, "mean_value()"],
            ["voltage", CUSTOM, "voltage()"],
            ["voltage waveform", CUSTOM, "voltage_waveform()"],
            ["set voltage", CUSTOM, "set_voltage()"],
            ["frequency", CUSTOM, "frequency()"]]



# User-custom Python code

m = 0.5     ##mean value
v = 0.0     ##voltage
u = 1
i = 0
j = 0
k = 0
w = [1]*100
z = [0]*100
pi = 3.14159
f = 1

######## FUNCTIONS ###########

def clip(s):
    if (s > 300): return 300
    if (s < 0.0): return 0
    return s

def mean_value():

	global m

	m = random.gauss(u/2, u/50)
	return "%.3f\r\n" %(m)

def set_voltage():

	global u

	args = COMMAND_RECEIVED.split()

	if len(args)>1:
		u = clip(float(args[1]))

def frequency():

	global f

	args = COMMAND_RECEIVED.split()

	if len(args)>1:
		f = clip(float(args[1]))

def voltage():

	global j

	v = math.sin(j*2*pi*f/100)    ## getting 100 samples/period
	j = j + 1

	if (v >= 0):
		v = u + random.uniform(0.01,0.05)
		return "%.3f\r\n" %(v)
	else:
		v = random.uniform(0.01,0.05)
		return "%.3f\r\n" %(v)

def voltage_waveform():

	global w
	global z
	global i
	global k

	for i in range(len(w)):
		w[i] = random.gauss(u, u/25)

	for k in range(len(z)):
		z[k] = random.uniform(0, 0.1)

	return "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n" %(w[0],w[1],w[2],w[3],w[4],w[5],w[6],w[7],w[8],w[9],z[0],z[1],z[2],z[3],z[4],z[5],z[6],z[7],z[8],z[9],w[10],w[11],w[12],w[13],w[14],w[15],w[16],w[17],w[18],w[19],z[10],z[11],z[12],z[13],z[14],z[15],z[16],z[17],z[18],z[19],w[20],w[21],w[22],w[23],w[24],w[25],w[26],w[27],w[28],w[29],z[20],z[21],z[22],z[23],z[24],z[25],z[26],z[27],z[28],z[29],w[30],w[31],w[32],w[33],w[34],w[35],w[36],w[37],w[38],w[39],z[30],z[31],z[32],z[33],z[34],z[35],z[36],z[37],z[38],z[39],w[40],w[41],w[42],w[43],w[44],w[45],w[46],w[47],w[48],w[49],z[40],z[41],z[42],z[43],z[44],z[45],z[46],z[47],z[48],z[49],w[50],w[51],w[52],w[53],w[54],w[55],w[56],w[57],w[58],w[59],z[50],z[51],z[52],z[53],z[54],z[55],z[56],z[57],z[58],z[59],w[60],w[61],w[62],w[63],w[64],w[65],w[66],w[67],w[68],w[69],z[60],z[61],z[62],z[63],z[64],z[65],z[66],z[67],z[68],z[69],w[70],w[71],w[72],w[73],w[74],w[75],w[76],w[77],w[78],w[79],z[70],z[71],z[72],z[73],z[74],z[75],z[76],z[77],z[78],z[79],w[80],w[81],w[82],w[83],w[84],w[85],w[86],w[87],w[88],w[89],z[80],z[81],z[82],z[83],z[84],z[85],z[86],z[87],z[88],z[89],w[90],w[91],w[92],w[93],w[94],w[95],w[96],w[97],w[98],w[99],z[90],z[91],z[92],z[93],z[94],z[95],z[96],z[97],z[98],z[99])

